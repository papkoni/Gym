// <auto-generated />
using System;
using GymBackend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GymBackend.DataAccess.Migrations
{
    [DbContext(typeof(CourseworkContext))]
    partial class CourseworkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "file_fdw");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GymBackend.DataAccess.CoachEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("hiring_date");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("qualification");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("termination_date");

                    b.HasKey("Id")
                        .HasName("coach_pkey");

                    b.HasIndex("IdUser");

                    b.ToTable("coach", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.Entites.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer")
                        .HasColumnName("id_user");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("client_pkey");

                    b.HasIndex("IdUser");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.ProgressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<byte[]>("HipArm")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hip_arm");

                    b.Property<byte[]>("HipChest")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hip_chest");

                    b.Property<byte[]>("HipGirth")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hip_girth");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<byte[]>("Weight")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("progress_pkey");

                    b.HasIndex("IdClient");

                    b.ToTable("progress", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.PurchaseHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<int>("IdSubscription")
                        .HasColumnType("integer")
                        .HasColumnName("id_subscription");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("purchase_history_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSubscription");

                    b.ToTable("purchase_history", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.RegistrationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("from_date");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<int>("IdScheduleGroup")
                        .HasColumnType("integer")
                        .HasColumnName("id_schedule_group");

                    b.HasKey("Id")
                        .HasName("registration_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdScheduleGroup");

                    b.ToTable("registration", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.ScheduleGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IdCoach")
                        .HasColumnType("integer")
                        .HasColumnName("id_coach");

                    b.Property<int>("MaxPeople")
                        .HasColumnType("integer")
                        .HasColumnName("max_people");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TypeOfTraining")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_of_training");

                    b.HasKey("Id")
                        .HasName("schedule_group_pkey");

                    b.HasIndex("IdCoach");

                    b.ToTable("schedule_group", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.SubscriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("subscription_pkey");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.HasIndex(new[] { "Login" }, "unique_login")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.VisitEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("IdClient")
                        .HasColumnType("integer")
                        .HasColumnName("id_client");

                    b.Property<int?>("IdScheduleGroup")
                        .HasColumnType("integer")
                        .HasColumnName("id_schedule_group");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("visit_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdScheduleGroup");

                    b.HasIndex(new[] { "StartDate" }, "idx_visit_start_date");

                    b.ToTable("visit", (string)null);
                });

            modelBuilder.Entity("GymBackend.DataAccess.CoachEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.UserEntity", "IdUserNavigation")
                        .WithMany("Coaches")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("coach_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.Entites.ClientEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.UserEntity", "IdUserNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("client_id_user_fkey");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.ProgressEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.Entites.ClientEntity", "IdClientNavigation")
                        .WithMany("Progresses")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("progress_id_client_fkey");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.PurchaseHistoryEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.Entites.ClientEntity", "IdClientNavigation")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("purchase_history_id_client_fkey");

                    b.HasOne("GymBackend.DataAccess.SubscriptionEntity", "IdSubscriptionNavigation")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("IdSubscription")
                        .IsRequired()
                        .HasConstraintName("purchase_history_id_subscription_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdSubscriptionNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.RegistrationEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.Entites.ClientEntity", "IdClientNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("registration_id_client_fkey");

                    b.HasOne("GymBackend.DataAccess.ScheduleGroupEntity", "IdScheduleGroupNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("IdScheduleGroup")
                        .IsRequired()
                        .HasConstraintName("registration_id_schedule_group_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdScheduleGroupNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.ScheduleGroupEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.CoachEntity", "IdCoachNavigation")
                        .WithMany("ScheduleGroups")
                        .HasForeignKey("IdCoach")
                        .IsRequired()
                        .HasConstraintName("schedule_group_id_coach_fkey");

                    b.Navigation("IdCoachNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.VisitEntity", b =>
                {
                    b.HasOne("GymBackend.DataAccess.Entites.ClientEntity", "IdClientNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("visit_id_client_fkey");

                    b.HasOne("GymBackend.DataAccess.ScheduleGroupEntity", "IdScheduleGroupNavigation")
                        .WithMany("Visits")
                        .HasForeignKey("IdScheduleGroup")
                        .HasConstraintName("visit_id_schedule_group_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdScheduleGroupNavigation");
                });

            modelBuilder.Entity("GymBackend.DataAccess.CoachEntity", b =>
                {
                    b.Navigation("ScheduleGroups");
                });

            modelBuilder.Entity("GymBackend.DataAccess.Entites.ClientEntity", b =>
                {
                    b.Navigation("Progresses");

                    b.Navigation("PurchaseHistories");

                    b.Navigation("Registrations");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("GymBackend.DataAccess.ScheduleGroupEntity", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("GymBackend.DataAccess.SubscriptionEntity", b =>
                {
                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("GymBackend.DataAccess.UserEntity", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Coaches");
                });
#pragma warning restore 612, 618
        }
    }
}
